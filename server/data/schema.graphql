type Client {
  id: ID
  name: String
  last_name: String
  age: Int
  emails: [Email]
  business: String
  type: ClientType
  orders: [Order]
}
type Product {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}
type Order {
  id: ID
  order: [ProductOrder]!
  total: Number!
  date: String!
  client: String!
  state: OrderState!
}
type Email {
  email: String
}
type Query {
  """
  Get clients from server
  """
  getAllClients(limit: Int, offset: Int): [Client]
  """
  Get an specific client
  """
  getClient(id: ID!): Client
  """
  Get clients count
  """
  totalClients: String
  """
  Get products from server
  """
  getAllProducts(limit: Int, offset: Int): [Product]
  """
  Get an specific product
  """
  getProduct(id: ID!): Product
  """
  Get products count
  """
  totalProducts: String
}
enum ClientType {
  BASIC
  PREMIUM
}
input EmailInput {
  email: String!
}
input OrderInput {
  product: String!
  quantity: Int!
}
input ClientForm {
  id: ID
  name: String!
  last_name: String!
  age: Int!
  emails: [EmailInput]
  business: String
  type: ClientType!
  orders: [OrderInput]
}
input ProductForm {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}
input ProductOrder {
  id: ID
  quantity: Number
}
input OrderForm {
  id: ID
  order: [ProductOrder]!
  total: Number!
  date: String!
  client: String!
  state: OrderState!
}
enum OrderState {
  PENDING
  COMPLETED
  CANCELLED
}
type Mutation {
  """
  Register a new client
  """
  createClient(form: ClientForm): Client
  """
  Update an existing client. If the client doesn't exists, the request creates a new one
  """
  updateClient(form: ClientForm): Client
  """
  Delete an existing client
  """
  deleteClient(id: ID!): String
  """
  Create a new product
  """
  createProduct(form: ProductForm): Product
  """
  Update an existing product. If the product doesn't exists, the request creates a new one
  """
  updateProduct(form: ProductForm): Product
  """
  Delete an existing product
  """
  deleteProduct(id: ID!): String
  """
  Create a new order
  """
  createOrder(form: OrderForm): Order
}
